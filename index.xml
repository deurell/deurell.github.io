<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Depeche Node</title>
    <link>https://deurell.github.io/</link>
    <description>Recent content on Depeche Node</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>dev@deurell.net</contact>
    <copyright></copyright>
    
        <atom:link href="https://deurell.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up ShaderModifiers in SceneKit</title>
      <link>https://deurell.github.io/posts/scenekit-setup/</link>
      <pubDate>Fri, 12 Apr 2019 18:45:31 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/scenekit-setup/</guid>
      <description></description>
      
      <content>&lt;p&gt;I &amp;lt;3 the Metal shader debugger in XCode. It&amp;rsquo;s one of those things that feels that they&amp;rsquo;ve been sent from the future. I&amp;rsquo;ve been doing shaders in OpenGL for years and years. The last five years I&amp;rsquo;ve been helping a nice Swedish game company to code casual games with a lot of Candy. And Crushes. More than once I&amp;rsquo;ve realized that the demos and shaders I did for fun in my teens is the very thing that&amp;rsquo;s putting food on the table for my kids over 100 years later. Well.. Almost 100 years later..&lt;/p&gt;

&lt;p&gt;After last years WWDC I downloaded the new XCode with the Metal debugger and. I was completely blown away! Writing shaders in Metal is like writing ordinary C++ 14 at work but without those pesky templates. Just the way I like C++! And the debugger. The debugger is better the my standard C++ debugger at work!&lt;/p&gt;

&lt;p&gt;I did a lot of face tracking apps with AR kit. Pretty much like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/face.gif&#34; alt=&#34;face tracking&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I wanted to have a quick shader lab environment without an iPhone and AR stuff but still work on the face tracking SceneKit shaders on the commute to work where I only have my laptop. The quickest setup was to do a simple plane geometry in SceneKit and hook up ShaderModifiers.&lt;/p&gt;

&lt;p&gt;ShaderModifiers can be both vertex and framgement modifiers and hooks in to the standard SceneKit shader setup using pragmas. Pretty convenient, I use it all the time. So how do we set it up?&lt;/p&gt;

&lt;p&gt;Create a standard MacOS app with a view and a ViewController, set up a SceneKit scene and hook up a shader modifier this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Cocoa
import SceneKit

class ViewController: NSViewController {
    
    var scnView: SCNView!
    var scnScene: SCNScene!
    var cameraNode: SCNNode!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        scnView = self.view as? SCNView
        scnView.showsStatistics = false
        scnView.allowsCameraControl = true
        scnView.autoenablesDefaultLighting = false
        
        scnScene = SCNScene()
        scnScene.background.contents = NSColor.gray
        scnView.scene = scnScene
        
        cameraNode = SCNNode()
        cameraNode.camera = SCNCamera()
        cameraNode.position = SCNVector3(x:0, y:0, z:12)
        scnScene.rootNode.addChildNode(cameraNode)
        
        let plane = SCNPlane(width: 20, height: 10)
        
        guard let shaderURL = Bundle.main.url(forResource: &amp;quot;frag&amp;quot;, withExtension: &amp;quot;shader&amp;quot;),
            let modifier = try? String(contentsOf: shaderURL)
            else { fatalError(&amp;quot;Can&#39;t load shader from bundle.&amp;quot;) }
        
        plane.shaderModifiers = [.fragment: modifier]
        
        let node = SCNNode(geometry: plane)
        plane.firstMaterial?.diffuse.contents = NSImage(named: &amp;quot;skull&amp;quot;)
        plane.firstMaterial?.diffuse.wrapS = SCNWrapMode.repeat;
        plane.firstMaterial?.diffuse.wrapT = SCNWrapMode.repeat;
        scnScene.rootNode.addChildNode(node)
        scnView.isPlaying = true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a texture to the bundle, in this case it&amp;rsquo;s called skulls and create a frag.shader file with the shader modifier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma transparent
#pragma body

float mpi = 3.1415926535897932384626433832795;
// scenekit stashes time in scn_frame
float iTime = scn_frame.time;

// grab uv coords from our material
float2 uv = _surface.diffuseTexcoord;

// we want a coords from -1 to 1 instead of standard uv coords (0-1)
float2 p = -1.0+2.0*uv;

// length and angle from center for fancy polar coord dist.
float r = length(p);
float a = atan(p.y / p.x);

//classic demo fx
float2 uvmod = float2(p.x/abs(p.y), 1/abs(p.y));
 
// uv scroll it with time
uvmod += iTime;

// get the diffuse sampler and get col at distorted uv coords
float4 texcol = u_diffuseTexture.sample(u_diffuseTextureSampler, uvmod);
_output.color.rgba = texcol;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample is a classic memory from my boy room. A nice u=x/abs(y) v=1/abs(y), but in 2019 I don&amp;rsquo;t need LUTs. Nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/absy.gif&#34; alt=&#34;demo time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The full source code can be found here &lt;a href=&#34;https://github.com/deurell/ShaderModifierLab&#34;&gt;https://github.com/deurell/ShaderModifierLab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;3&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Teaching your teen to code a starfield in PICO-8</title>
      <link>https://deurell.github.io/posts/starfield/</link>
      <pubDate>Wed, 10 Apr 2019 16:59:21 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/starfield/</guid>
      <description></description>
      
      <content>&lt;p&gt;Kids love starfields. It&amp;rsquo;s a perfect coding session with a nice visual result and basic highschool math. We&amp;rsquo;re going to build this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/starfield.gif&#34; alt=&#34;starfield&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When coding with kids, always keep it simple and at their level. I know most of you reading this are math wizards but kids tend not to be super impressed by your vector math and matrix calculations (believe me, I&amp;rsquo;ve tried). You&amp;rsquo;re going for quick results and simple code, on their math level. If you push them too hard you&amp;rsquo;ll loose them to another Overwatch session. We&amp;rsquo;re trying to avoid that.&lt;/p&gt;

&lt;p&gt;A star object is a 3D vector, that&amp;rsquo;s math for a basic x,y,z coordinate in space. [1,2,3] would be a star at x=1, y=2, z=3 in space. We will have a bunch of star objects with random x,y,z coordinates. Since we want them to move towards us we just decrease the z coordinate for each star every frame, keeping their x and y coordinate intact. In order to get it to look like a starfield we simply calculate the x and y screen coordinate by dividing the star x and y coordinate with z. Big z will give us small x and y screen coordinates. Small Z will give us the opposite. We&amp;rsquo;ll keep the x and y coordinates for a star in the range -2500 to 2500 and the z in the range 0 to 150 A quick and dirty perspective divide. That&amp;rsquo;s all the math. It looks like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/starfield_debug.gif&#34; alt=&#34;starfield debug&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the x,y,z star coordinates for the star below the star screen coordinates which are just x and y divided by z.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by adding the following code in the code tab.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- this is called once when the program starts
function _init()
 -- calls our starfield init code and sets up all the stars
 sf.generate()
end

-- normal pico8 frame rate is 30
-- add this function to get 60 fps
function _update60()
end

-- called every frame
function _draw()
 -- clear screen with black
 cls(0)
 -- update the starfield
 sf.update()
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll put the starfield code in another pico-8 code tab. You can copy and pase the code below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sf={}
sf.stars={}
-- let&#39;s have 128 stars
sf.starcount=128
-- max z for a star is 150
sf.maxd=150

sf.generate=function()
local range=2500
  --create table with stars
  for i=1,sf.starcount do
  	--keep x any y in ranmge -2500 to 2500
    xp=flr(range-rnd(range*2))
    yp=flr(range-rnd(range*2))
    zp=rnd(sf.maxd)
    add(sf.stars,{x=xp,y=yp,z=zp})
  end
end

sf.update=function()
  for i=1,#sf.stars do
    sf.stars[i].z=sf.stars[i].z-1
    if sf.stars[i].z&amp;lt;=0 then
	  sf.stars[i].z=sf.maxd
    end
  end
  --iterate all the stars
  for i=1,#sf.stars do
    --calc star pos xp=x/z yp=y/z
	local cz=sf.stars[i].z
	local cx=sf.stars[i].x/cz
	local cy=sf.stars[i].y/cz
	--if star is outside sceen
	--set z position to max dist
	if cx&amp;lt;-64 or cx&amp;gt;64 then
	  sf.stars[i].z=sf.maxd
	end
	if cy&amp;lt;-64 or cy&amp;gt;64 then
	  sf.stars[i].z=sf.maxd
	end
	--set the color of the star
	local cols={7,6,5}
	local ci=1+flr(cz/sf.maxd*#cols)
	--plot the star
	  pset(64+cx,64+cy,cols[ci])
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. A star field project in PICO-8. It&amp;rsquo;s a two hour session for a 14 year old including setting up pico-8, explaining basic Lua and writing the project.&lt;/p&gt;

&lt;p&gt;Source code and cartridge is available here &lt;a href=&#34;https://www.lexaloffle.com/bbs/?tid=33840&#34;&gt;https://www.lexaloffle.com/bbs/?tid=33840&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PICO-8 is available from here &lt;a href=&#34;https://www.lexaloffle.com/pico-8.php&#34;&gt;https://www.lexaloffle.com/pico-8.php&lt;/a&gt;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Teaching kids game development with PICO-8</title>
      <link>https://deurell.github.io/posts/crazy-comets/</link>
      <pubDate>Mon, 08 Apr 2019 22:45:00 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/crazy-comets/</guid>
      <description></description>
      
      <content>&lt;p&gt;Growing up I loved to play Crazy Comets on my C64. The magic starfield seemed almost impossible to code for a 14 year old and the music by Rob Hubbard totally blew me away. I decided to code a pico8 remake of it together with my 6 year old daughter in order to show her how to make games. We had a fantastic time!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/crazy_intro.gif&#34; alt=&#34;crazy comets intro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pico8 has the simplicity needed in order to show how everything fits together. Graphics, code, music and effects. You can have a live discussion about game development while coding and showing how things are made. In my ordinary job as a C++ game developer everything takes time, sometimes a lot of time. In Lua and pico8 it&amp;rsquo;s refreshingly fast. Like super, blazingly fast. And at the same time it brings the classic C64 feeling of having control. And what can I say. Kids love pixel art. A perfect teaching environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/crazy_game.gif&#34; alt=&#34;crazy comets game&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The game is implemented as a simple state machine with objects handling the ship, comets, star field, camera, particles and missiles. It handles collision detection with classic AABB bounding boxes and I&amp;rsquo;ll come back to some of the implementation in a future blog post. The game has a whopping total size of 11K. &amp;lt;3&lt;/p&gt;

&lt;p&gt;You can download the game with all source code as a cartridge here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/cart.p8.png&#34; alt=&#34;cartridge&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or play the game in a web browser by following the following link.&lt;br /&gt;
&lt;a href=&#34;https://lexaloffle.com/bbs/?tid=32886&#34;&gt;https://lexaloffle.com/bbs/?tid=32886&lt;/a&gt;&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>