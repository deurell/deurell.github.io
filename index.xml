<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Depeche Node</title>
    <link>https://deurell.github.io/</link>
    <description>Recent content on Depeche Node</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>dev@deurell.net</contact>
    <copyright></copyright>
    
        <atom:link href="https://deurell.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Metal shader development on an iPad</title>
      <link>https://deurell.github.io/posts/playground-shaders/</link>
      <pubDate>Tue, 23 Apr 2019 18:53:16 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/playground-shaders/</guid>
      <description></description>
      
      <content>

&lt;p&gt;The iPad is an amazing learning device. You can read shader books on it. Draw shader ideas on it. And ever since iOS playgrounds got a major boost you can even develop Metal shaders on it using Playgrounds.&lt;/p&gt;

&lt;p&gt;It was the only device I had with me on my easter vacation in the woods. Most of the time was spent like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/woods.png&#34; alt=&#34;woods&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But you need to catch your breath every once in a while and what could possibly be better than coding shaders on the iPad, in the hammock?&lt;/p&gt;

&lt;h2 id=&#34;enter-ios-playgrounds&#34;&gt;Enter iOS playgrounds&lt;/h2&gt;

&lt;p&gt;Playgrounds on the iPad supports SceneKit development and the shaders we wrote in the previous posts were all metal based shaders in SceneKit so we&amp;rsquo;re fine! The lazer cube shader is easy, the only thing I had to do was to old school include the fragment shader modifier in a Swift string, move to UIKit and add the scene to the Playgrounds live view. The full source looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
import SceneKit
import PlaygroundSupport

let frame = CGRect(
    x: 0,
    y: 0,
    width: 400,
    height: 200)
let sceneView = SCNView(frame: frame)
sceneView.backgroundColor = #colorLiteral(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
sceneView.showsStatistics = false
sceneView.autoenablesDefaultLighting = false
sceneView.allowsCameraControl = true
sceneView.scene = SCNScene()

let cameraNode = SCNNode()
cameraNode.camera = SCNCamera()
cameraNode.position = SCNVector3(x: 0, y: 0, z: 12)
sceneView.scene!.rootNode.addChildNode(cameraNode)

let geo = SCNBox(
    width: 4,
    height: 4,
    length: 4,
    chamferRadius: 0.5)
let node = SCNNode(geometry: geo)
node.transform = SCNMatrix4MakeRotation(Float.pi * 0.25,1,0,0)
sceneView.scene!.rootNode.addChildNode(node)

let material = geo.firstMaterial!

let fragShader = &amp;quot;&amp;quot;&amp;quot;
#pragma transparent
#pragma arguments
float3 lazerCol;
#pragma body
float2 uv = _surface.diffuseTexcoord;
float x = 1.0-sin(uv.x*M_PI_F);
x = pow(x,4) - 0.05;
float y = 1.0-sin(uv.y*M_PI_F);
y = pow(y,4)-0.05;

float mx = mix(x,y,0.5);
float3 col = lazerCol * mx;
col *= 4.;
_output.color.rgb = col;
&amp;quot;&amp;quot;&amp;quot;

material.shaderModifiers = [.fragment: fragShader]

material.setValue(SCNVector3(0.5, 0.8, 0.5), forKey: &amp;quot;lazerCol&amp;quot;)
PlaygroundSupport.PlaygroundPage.current.liveView = sceneView
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After doing that we get the reward! Metal Shader development on the iPad:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/laz.jpeg&#34; alt=&#34;lazer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really nice to have documentation available in the source view and Playgrounds is also pretty good at visualizing things. Like this &lt;code&gt;SCNMatrix4&lt;/code&gt; rotation, rotated 45 degrees around the X-axis, inlined in the source. Fantastic for teaching!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/laz_vi.jpeg&#34; alt=&#34;lazer&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;so-how-do-we-handle-resources&#34;&gt;So how do we handle resources?&lt;/h2&gt;

&lt;p&gt;We really need a texture for the skull &amp;lsquo;LUT&amp;rsquo; deformation frag shader modifier. For some reason you can&amp;rsquo;t add them from the iPad. You need to boot up XCode on the Mac and add the resource to the playground from there. After that you can move back to your iPad, sync, and do an ordinary trusted&lt;/p&gt;

&lt;p&gt;&lt;code&gt;geo.firstMaterial?.diffuse.contents = UIImage(named: &amp;quot;skull.jpg&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But hey, it&amp;rsquo;s pretty cool anyways. After you have the resource in place everything is back to normal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/sku.jpeg&#34; alt=&#34;lazer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it. You can now fine tune your shaders on the commute to work. Or in the hammock in the deep woods of Sweden.&lt;/p&gt;

&lt;p&gt;&amp;lt;3&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Recreating Beat Saber lazers with unicorns</title>
      <link>https://deurell.github.io/posts/beatlazers/</link>
      <pubDate>Sun, 14 Apr 2019 15:56:27 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/beatlazers/</guid>
      <description></description>
      
      <content>&lt;p&gt;I&amp;rsquo;ve been coding professionally for over 20 years and I still learn new things every single day. One of the most fun and rewarding ways I use to get better is to recreate things in games I love. And I&amp;rsquo;m in love with so many games. It never ends. An endless, lovely, gamedev tutorial!&lt;/p&gt;

&lt;p&gt;One of the games I love is Beat Saber. I wanted to recreate it as a VR learning experience on my HTC Vive. It was a really fun journey. The first thing I needed to work out was to find a good way to slice geometries. That kinda sidetracked me for a while. But that&amp;rsquo;s another beautiful story including sliced unicorns, which might just be a future blog post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/uni.gif&#34; alt=&#34;slicing unicorns&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, after the mesh slicing was in place I needed lazers. Everyone who has played Beat Saber knows that you need cubes with some kind of lazer material. Turns out creating lazer cubes is a really nice tutorial for shader newbies. We&amp;rsquo;ll base everything on the ShaderModifier source from &lt;a href=&#34;https://deurell.github.io/posts/scenekit-setup/&#34;&gt;here&lt;/a&gt;. The code for this tutorial is in in the same repository but in the &lt;code&gt;lazer&lt;/code&gt; branch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:deurell/ShaderModifierLab.git
git checkout lazer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only change in the ViewController setup is that we use a cube instead of a plane.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let geo = SCNBox(width: 6, height: 6, length: 6, chamferRadius: 1.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that we setup the shader to just output the UV coordinates. This is pretty much the starting point for all shader dev work, especially if we have modified the coordinate system. Outputting the UVs with X as red, Y as green and 0 as blue looks like this. You&amp;rsquo;ll remember this as a sign of &amp;ldquo;Oh nice, everything seems to be ok&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/uv.png&#34; alt=&#34;uv&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SceneKit calls UV&amp;rsquo;s Texcoords, just like Unreal, and it stashes them in _surface, in this case in diffureTexcoord. The shaderModifier code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma transparent
#pragma body
float2 uv = _surface.diffuseTexcoord;
_output.color.rgb = float3(uv.r, uv.g, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing we have to do to turn it into a lazer is adding a fancy sine curve:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float2 uv = _surface.diffuseTexcoord;
float col = sin(uv.y * M_PI_F);
_output.color.rgb = float3(col, col, col);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/sin.png&#34; alt=&#34;sin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We only want the first 180 degrees of the sine curve, since we have radians we&amp;rsquo;ll get values from 0-pi rad (0-180 deg).
The next step will be to invert it and pow it in order to push it to the edges. We want the lazers to be concentrated to the edges of the cube. Like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/lazer2.png&#34; alt=&#34;lazer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;ll just need to do the same thing for the horizontal lazers. We also need to merge/lerp the horizontal and vertical lazers as we want lazers on all the edges on the cube. Lerp in shaders is called &lt;code&gt;mix&lt;/code&gt; and that&amp;rsquo;s exactly what we want to do. We really want to merge them with a &lt;code&gt;0.5x+0.5y&lt;/code&gt; and this is exactly what &lt;code&gt;mix(x,y,0.5)&lt;/code&gt;does.&lt;/p&gt;

&lt;p&gt;The next step is to pimp the gray lazer with some green color. That&amp;rsquo;s just a multiplication with a green [red=0.2,green=0.9,blue=0.2] vector. A litte dash of whiteness look better so we multiply the final color vector with 8. And that&amp;rsquo;s it! A good enough lazer cube to slice with a light saber! The final shader code looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma transparent
#pragma body
float2 uv = _surface.diffuseTexcoord;
// horizontal
float x = 1.0-sin(uv.x*M_PI_F);
x = pow(x,4) - 0.1;
// vertical
float y = 1.0-sin(uv.y*M_PI_F);
y = pow(y,4)-0.1;
// interpolate. In this case same as 0.5*x+0.5*y 
float mx = mix(x,y,0.5);
float3 col = float3(0.2, 0.9, 0.2) * mx;
col *= 8.;
_output.color.rgb = col;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the final result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/lazer_res.gif&#34; alt=&#34;lazer end result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;3&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Setting up ShaderModifiers in SceneKit</title>
      <link>https://deurell.github.io/posts/scenekit-setup/</link>
      <pubDate>Fri, 12 Apr 2019 18:45:31 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/scenekit-setup/</guid>
      <description></description>
      
      <content>&lt;p&gt;I &amp;lt;3 the Metal shader debugger in XCode. It&amp;rsquo;s one of those things that feels like they&amp;rsquo;ve been sent from the future. I&amp;rsquo;ve been doing shaders in OpenGL for years and years. The last five years I&amp;rsquo;ve been helping a nice Swedish game company to code casual games with a lot of Candy. And Crushes. More than once I&amp;rsquo;ve realized that the demos and shaders I did for fun in my teens are the very things that&amp;rsquo;s putting food on the table for my kids over 100 years later. Well.. Almost 100 years later.&lt;/p&gt;

&lt;p&gt;After last years WWDC I downloaded the new XCode with the Metal debugger and. I was completely blown away! Writing shaders in Metal is like writing ordinary C++ 14 at work but without those pesky templates. Just the way I like C++! And the shader debugger. The shader debugger is better the my standard C++ debugger at work!&lt;/p&gt;

&lt;p&gt;I did a lot of face tracking app sessions with AR kit. Pretty much like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/face.gif&#34; alt=&#34;face tracking&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I wanted to have a quick shader lab environment without an iPhone and AR stuff but still work on the face tracking SceneKit shaders on the commute to work where I only have my laptop. The quickest setup was to do a simple plane geometry in SceneKit and hook up ShaderModifiers.&lt;/p&gt;

&lt;p&gt;ShaderModifiers can be both vertex and fragment modifiers and are injected in to the standard SceneKit shader setup using pragmas. Pretty convenient, I use it all the time. So how do we set it up?&lt;/p&gt;

&lt;p&gt;Create a standard MacOS app with a view and a ViewController, set up a SceneKit scene and hook up a shader modifier this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Cocoa
import SceneKit

class ViewController: NSViewController {
    
    var scnView: SCNView!
    var scnScene: SCNScene!
    var cameraNode: SCNNode!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        scnView = self.view as? SCNView
        scnView.showsStatistics = false
        scnView.allowsCameraControl = true
        scnView.autoenablesDefaultLighting = false
        
        scnScene = SCNScene()
        scnScene.background.contents = NSColor.gray
        scnView.scene = scnScene
        
        cameraNode = SCNNode()
        cameraNode.camera = SCNCamera()
        cameraNode.position = SCNVector3(x:0, y:0, z:12)
        scnScene.rootNode.addChildNode(cameraNode)
        
        let plane = SCNPlane(width: 20, height: 10)
        
        guard let shaderURL = Bundle.main.url(forResource: &amp;quot;frag&amp;quot;, withExtension: &amp;quot;shader&amp;quot;),
            let modifier = try? String(contentsOf: shaderURL)
            else { fatalError(&amp;quot;Can&#39;t load shader from bundle.&amp;quot;) }
        
        plane.shaderModifiers = [.fragment: modifier]
        
        let node = SCNNode(geometry: plane)
        plane.firstMaterial?.diffuse.contents = NSImage(named: &amp;quot;skull&amp;quot;)
        plane.firstMaterial?.diffuse.wrapS = SCNWrapMode.repeat;
        plane.firstMaterial?.diffuse.wrapT = SCNWrapMode.repeat;
        scnScene.rootNode.addChildNode(node)
        scnView.isPlaying = true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a texture to the bundle, in this case it&amp;rsquo;s called skulls and create a frag.shader file with the shader modifier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma transparent
#pragma body

float mpi = 3.1415926535897932384626433832795;
// scenekit stashes time in scn_frame
float iTime = scn_frame.time;

// grab uv coords from our material
float2 uv = _surface.diffuseTexcoord;

// we want a coords from -1 to 1 instead of standard uv coords (0-1)
float2 p = -1.0+2.0*uv;

// length and angle from center for fancy polar coord dist.
float r = length(p);
float a = atan(p.y / p.x);

//classic demo fx
float2 uvmod = float2(p.x/abs(p.y), 1/abs(p.y));
 
// uv scroll it with time
uvmod += iTime;

// get the diffuse sampler and get col at distorted uv coords
float4 texcol = u_diffuseTexture.sample(u_diffuseTextureSampler, uvmod);
_output.color.rgba = texcol;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample is a classic memory from my boy room. A nice u=x/abs(y) v=1/abs(y), but in 2019 I don&amp;rsquo;t need LUTs. Nice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/absy.gif&#34; alt=&#34;demo time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The full source code can be found here &lt;a href=&#34;https://github.com/deurell/ShaderModifierLab&#34;&gt;https://github.com/deurell/ShaderModifierLab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;3&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Teaching your teen to code a starfield in PICO-8</title>
      <link>https://deurell.github.io/posts/starfield/</link>
      <pubDate>Wed, 10 Apr 2019 16:59:21 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/starfield/</guid>
      <description></description>
      
      <content>&lt;p&gt;Kids love starfields. It&amp;rsquo;s a perfect coding session with a nice visual result and basic highschool math. We&amp;rsquo;re going to build this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/starfield.gif&#34; alt=&#34;starfield&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When coding with kids, always keep it simple and at their level. I know most of you reading this are math wizards but kids tend not to be super impressed by your vector math and matrix calculations (believe me, I&amp;rsquo;ve tried). You&amp;rsquo;re going for quick results and simple code, on their math level. If you push them too hard you&amp;rsquo;ll loose them to another Overwatch session. We&amp;rsquo;re trying to avoid that.&lt;/p&gt;

&lt;p&gt;A star object is a 3D vector, that&amp;rsquo;s math for a basic x,y,z coordinate in space. [1,2,3] would be a star at x=1, y=2, z=3 in space. We will have a bunch of star objects with random x,y,z coordinates. Since we want them to move towards us we just decrease the z coordinate for each star every frame, keeping their x and y coordinate intact. In order to get it to look like a starfield we simply calculate the x and y screen coordinate by dividing the star x and y coordinate with z. Big z will give us small x and y screen coordinates. Small Z will give us the opposite. We&amp;rsquo;ll keep the x and y coordinates for a star in the range -2500 to 2500 and the z in the range 0 to 150 A quick and dirty perspective divide. That&amp;rsquo;s all the math. It looks like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/starfield_debug.gif&#34; alt=&#34;starfield debug&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the x,y,z star coordinates for the star below the star screen coordinates which are just x and y divided by z.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by adding the following code in the code tab.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- this is called once when the program starts
function _init()
 -- calls our starfield init code and sets up all the stars
 sf.generate()
end

-- normal pico8 frame rate is 30
-- add this function to get 60 fps
function _update60()
end

-- called every frame
function _draw()
 -- clear screen with black
 cls(0)
 -- update the starfield
 sf.update()
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll put the starfield code in another pico-8 code tab. You can copy and pase the code below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sf={}
sf.stars={}
-- let&#39;s have 128 stars
sf.starcount=128
-- max z for a star is 150
sf.maxd=150

sf.generate=function()
local range=2500
  --create table with stars
  for i=1,sf.starcount do
  	--keep x any y in ranmge -2500 to 2500
    xp=flr(range-rnd(range*2))
    yp=flr(range-rnd(range*2))
    zp=rnd(sf.maxd)
    add(sf.stars,{x=xp,y=yp,z=zp})
  end
end

sf.update=function()
  for i=1,#sf.stars do
    sf.stars[i].z=sf.stars[i].z-1
    if sf.stars[i].z&amp;lt;=0 then
	  sf.stars[i].z=sf.maxd
    end
  end
  --iterate all the stars
  for i=1,#sf.stars do
    --calc star pos xp=x/z yp=y/z
	local cz=sf.stars[i].z
	local cx=sf.stars[i].x/cz
	local cy=sf.stars[i].y/cz
	--if star is outside sceen
	--set z position to max dist
	if cx&amp;lt;-64 or cx&amp;gt;64 then
	  sf.stars[i].z=sf.maxd
	end
	if cy&amp;lt;-64 or cy&amp;gt;64 then
	  sf.stars[i].z=sf.maxd
	end
	--set the color of the star
	local cols={7,6,5}
	local ci=1+flr(cz/sf.maxd*#cols)
	--plot the star
	  pset(64+cx,64+cy,cols[ci])
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it. A star field project in PICO-8. It&amp;rsquo;s a two hour session for a 14 year old including setting up pico-8, explaining basic Lua and writing the project.&lt;/p&gt;

&lt;p&gt;Source code and cartridge is available here &lt;a href=&#34;https://www.lexaloffle.com/bbs/?tid=33840&#34;&gt;https://www.lexaloffle.com/bbs/?tid=33840&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PICO-8 is available from here &lt;a href=&#34;https://www.lexaloffle.com/pico-8.php&#34;&gt;https://www.lexaloffle.com/pico-8.php&lt;/a&gt;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Teaching kids game development with PICO-8</title>
      <link>https://deurell.github.io/posts/crazy-comets/</link>
      <pubDate>Mon, 08 Apr 2019 22:45:00 +0200</pubDate>
      <author>Mikael Deurell</author>
      <guid>https://deurell.github.io/posts/crazy-comets/</guid>
      <description></description>
      
      <content>&lt;p&gt;Growing up I loved to play Crazy Comets on my C64. The magic starfield seemed almost impossible to code for a 14 year old and the music by Rob Hubbard totally blew me away. I decided to code a pico8 remake of it together with my 6 year old daughter in order to show her how to make games. We had a fantastic time!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/crazy_intro.gif&#34; alt=&#34;crazy comets intro&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pico8 has the simplicity needed in order to show how everything fits together. Graphics, code, music and effects. You can have a live discussion about game development while coding and showing how things are made. In my ordinary job as a C++ game developer everything takes time, sometimes a lot of time. In Lua and pico8 it&amp;rsquo;s refreshingly fast. Like super, blazingly fast. And at the same time it brings the classic C64 feeling of having control. And what can I say. Kids love pixel art. A perfect teaching environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/crazy_game.gif&#34; alt=&#34;crazy comets game&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The game is implemented as a simple state machine with objects handling the ship, comets, star field, camera, particles and missiles. It handles collision detection with classic AABB bounding boxes and I&amp;rsquo;ll come back to some of the implementation in a future blog post. The game has a whopping total size of 11K. &amp;lt;3&lt;/p&gt;

&lt;p&gt;You can download the game with all source code as a cartridge here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://deurell.github.io/cart.p8.png&#34; alt=&#34;cartridge&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or play the game in a web browser by following the following link.&lt;br /&gt;
&lt;a href=&#34;https://lexaloffle.com/bbs/?tid=32886&#34;&gt;https://lexaloffle.com/bbs/?tid=32886&lt;/a&gt;&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>